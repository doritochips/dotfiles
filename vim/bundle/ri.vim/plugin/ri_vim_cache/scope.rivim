= scope

(from gem actionpack-4.2.5.2)
=== Implementation from Scoping
------------------------------------------------------------------------------
  scope(*args) { || ... }

------------------------------------------------------------------------------

Scopes a set of routes to the given default options.

Take the following route definition as an example:

  scope path: ":account_id", as: "account" do
    resources :projects
  end

This generates helpers such as <tt>account_projects_path</tt>, just like
<tt>resources</tt> does. The difference here being that the routes generated
are like /:account_id/projects, rather than /accounts/:account_id/projects.

=== Options

Takes same options as <tt>Base#match</tt> and <tt>Resources#resources</tt>.

  # route /posts (without the prefix /admin) to <tt>Admin::PostsController</tt>
  scope module: "admin" do
    resources :posts
  end

  # prefix the posts resource's requests with '/admin'
  scope path: "/admin" do
    resources :posts
  end

  # prefix the routing helper name: +sekret_posts_path+ instead of +posts_path+
  scope as: "sekret" do
    resources :posts
  end


(from gem activerecord-4.2.5.2)
=== Implementation from CollectionProxy
------------------------------------------------------------------------------
  scope()

------------------------------------------------------------------------------

Returns a <tt>Relation</tt> object for the records in this association


(from gem activerecord-4.2.5.2)
=== Implementation from ActiveRecord::Reflection::MacroReflection
------------------------------------------------------------------------------


(from gem activerecord-4.2.5.2)
=== Implementation from ClassMethods
------------------------------------------------------------------------------
  scope(name, body, &block)

------------------------------------------------------------------------------

Adds a class method for retrieving and querying objects. A scope represents a
narrowing of a database query, such as <tt>where(color:
:red).select('shirts.*').includes(:washing_instructions)</tt>.

  class Shirt < ActiveRecord::Base
    scope :red, -> { where(color: 'red') }
    scope :dry_clean_only, -> { joins(:washing_instructions).where('washing_instructions.dry_clean_only = ?', true) }
  end

The above calls to <tt>scope</tt> define class methods <tt>Shirt.red</tt> and
<tt>Shirt.dry_clean_only</tt>. <tt>Shirt.red</tt>, in effect, represents the
query <tt>Shirt.where(color: 'red')</tt>.

You should always pass a callable object to the scopes defined with
<tt>scope</tt>. This ensures that the scope is re-evaluated each time it is
called.

Note that this is simply 'syntactic sugar' for defining an actual class
method:

  class Shirt < ActiveRecord::Base
    def self.red
      where(color: 'red')
    end
  end

Unlike <tt>Shirt.find(...)</tt>, however, the object returned by
<tt>Shirt.red</tt> is not an Array; it resembles the association object
constructed by a <tt>has_many</tt> declaration. For instance, you can invoke
<tt>Shirt.red.first</tt>, <tt>Shirt.red.count</tt>, <tt>Shirt.red.where(size:
'small')</tt>. Also, just as with the association objects, named scopes act
like an Array, implementing Enumerable; <tt>Shirt.red.each(&block)</tt>,
<tt>Shirt.red.first</tt>, and <tt>Shirt.red.inject(memo, &block)</tt> all
behave as if <tt>Shirt.red</tt> really was an Array.

These named scopes are composable. For instance,
<tt>Shirt.red.dry_clean_only</tt> will produce all shirts that are both red
and dry clean only. Nested finds and calculations also work with these
compositions: <tt>Shirt.red.dry_clean_only.count</tt> returns the number of
garments for which these criteria obtain. Similarly with
<tt>Shirt.red.dry_clean_only.average(:thread_count)</tt>.

All scopes are available as class methods on the ActiveRecord::Base descendant
upon which the scopes were defined. But they are also available to
<tt>has_many</tt> associations. If,

  class Person < ActiveRecord::Base
    has_many :shirts
  end

then <tt>elton.shirts.red.dry_clean_only</tt> will return all of Elton's red,
dry clean only shirts.

Named scopes can also have extensions, just as with <tt>has_many</tt>
declarations:

  class Shirt < ActiveRecord::Base
    scope :red, -> { where(color: 'red') } do
      def dom_id
        'red_shirts'
      end
    end
  end

Scopes can also be used while creating/building a record.

  class Article < ActiveRecord::Base
    scope :published, -> { where(published: true) }
  end

  Article.published.new.published    # => true
  Article.published.create.published # => true

Class methods on your model are automatically available on scopes. Assuming
the following setup:

  class Article < ActiveRecord::Base
    scope :published, -> { where(published: true) }
    scope :featured, -> { where(featured: true) }

    def self.latest_article
      order('published_at desc').first
    end

    def self.titles
      pluck(:title)
    end
  end

We are able to call the methods like this:

  Article.published.featured.latest_article
  Article.featured.titles


(from gem bundler-1.11.2)
=== Implementation from Bundler::CLI::Config
------------------------------------------------------------------------------


(from gem friendly_id-5.1.0)
=== Implementation from FriendlyId::Scoped::Configuration
------------------------------------------------------------------------------

Gets the scope value.

When setting this value, the argument should be a symbol referencing a
`belongs_to` relation, or a column.

@return Symbol The scope value


(from gem cutest-1.2.3)
=== Implementation from Kernel
------------------------------------------------------------------------------
  scope(name = nil, &block)

------------------------------------------------------------------------------

Create an instance where the block will be evaluated. Recommended to improve
isolation between tests.


(from gem rake-10.4.2)
=== Implementation from NameSpace
------------------------------------------------------------------------------
  scope()

------------------------------------------------------------------------------

The scope of the namespace (a LinkedList)


(from gem rake-10.4.2)
=== Implementation from Rake::Task
------------------------------------------------------------------------------

Array of nested namespaces names used for task lookup by this task.


(from ruby site)
=== Implementation from LDAP
------------------------------------------------------------------------------
  scope()

------------------------------------------------------------------------------

returns scope.


